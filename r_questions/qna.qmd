---
title: '**QnA: Attempting R Programming Sample Questions**'
author: "John Karuitha; diakingathia005@gmail.com"
date: "`r format(Sys.Date(), format = '%A %B %d, %Y')`"
echo: TRUE 
message: FALSE 
warning: FALSE
format: 
        html:
                toc: false
        pdf:
                toc: false
---

```{r}
#| include: false
library(tidyverse)
library(glue)
```

## **Background**

In this project, I attempt R programming sample questions available on this [site](https://www.w3resource.com/r-programming-exercises/) <https://www.w3resource.com/r-programming-exercises/>. The questions range from basic to advanced R programming questions that could come handy in data analysis. 

### ***Question 1: Write a R program to take input from the user (name and age) and display the values. Also print the version of R installation.***

The function readline() takes a prompt that a user can enter a value. Usually the value is a string. Thus if the input is a number, as.numeric function can do the conversion. 

```{r}
my_name <- readline(prompt = "Please enter your name: ")
my_age <- readline(prompt = "Please enter your age: ")

print(glue("Hello. My name is {my_name} and I am {my_age} years old."))

## To print R version use R.Version()
R.Version()
```

### ***Question 2: Write a R program to get the details of the objects in memory.***

The ls() function, just like in linux, lists the objects in memory. on the other hand, sessionInfo() lists attached packages. 

```{r}
ls()
sessionInfo()
```

### ***Question 3:  Write a R program to create a sequence of numbers from 20 to 50 and find the mean of numbers from 20 to 60 and sum of numbers from 51 to 91.***

The `:` function is useful in this respect although the `seq` function is also a viable alternative. 

```{r}
my_seq <- 20:50

my_seq

mean(20:60)

sum(51:91)
```

### ***Question 4:  Write a R program to create a vector which contains 10 random integer values between -50 and +50.***

The `sample` function takes the vector of numbers from which to pick a random sample and the size of the sample. The argument `replace` can be TRUE or FALSE depending on the goals of the sampling procedure. 

```{r}
sample(-50:50, size = 10, replace = TRUE)
```

### ***Question 5: Write a R program to get the first 10 Fibonacci numbers.***

```{r}
Fibonacci <- numeric(10)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("First 10 Fibonacci numbers:")
print(Fibonacci)
```

### ***Write a R program to print the numbers from 1 to 100 and print "Fizz" for multiples of 3, print "Buzz" for multiples of 5, and print "FizzBuzz" for multiples of both.***

```{r}
for (number in 1:100) {
    if (number %% 3 == 0 & number %% 5 == 0) {
        print(glue("{number} FizzBuzz"))
    } else if (number %% 3 == 0) {
        print(glue("{number} Fizz"))
    } else if (number %% 5 == 0) {
        print(glue("{number} buzz"))
    } else {
        print(glue("{number} Not divisible by 3, 5 or both"))
    }
}
```

### ***Write a R program to extract first 10 english letter in lower case and last 10 letters in upper case and extract letters between 22nd to 24th letters in upper case.***

```{r}
letters[1:10]
LETTERS[-(1:10)]
letters[22:24]
LETTERS[22:24]
```

### ***Write a R program to find the factors of a given number.***

```{r}
print_factors <- function(n) {
    print(paste("The factors of", n, "are:"))
    for (i in 1:n) {
        if ((n %% i) == 0) {
            print(i)
        }
    }
}

print_factors(13)
```

### ***Write a R program to find the maximum and the minimum value of a given vector.***

```{r}
my_vector <- c(3, 4, 5, 6, 8)

for (number in my_vector) {
    max <- my_vector[1]
    if (number > max) {
        max <- number
    }
}

print(max)

## or can use the bukt in max function
max(my_vector)
```



### ***Write a R program to get the unique elements of a given string and unique numbers of vector. ***


```{r}
another_vector <- c(4, 4, 5, 6)

unique(another_vector)
```

### ***Write a R program to create three vectors a,b,c with 3 integers. Combine the three vectors to become a 3×3 matrix where each column represents a vector. Print the content of the matrix.***

```{r}
vector_1 <- c(3, 4, 5)
vector_2 <- c(5, 4, 7)
vector_3 <- c(1, 4, 0)

rbind(vector_1, vector_2, vector_3)
```

### ***Write a R program to create a list of random numbers in normal distribution and count occurrences of each value.***

```{r}
rnorm(100)

table(rnorm(100))
```

### ***Write a R program to read the .csv file and display the content.***

Here I use a sample of csv files available on this [site](https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html) <https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html>



```{r}
my_data <- curl::curl("https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv")

my_csv <- read.csv(my_data)

my_csv

my_csv %>%
    pivot_longer(-Month,
        names_to = "year",
        values_to = "passengers"
    ) %>%
    relocate(year) %>%
    mutate(year = str_remove_all(year, "X")) %>%
    arrange(year)
```


### ***Write a R program to create three vectors numeric data, character data and logical data. Display the content of the vectors and their type.***

```{r}
double_vector <- c(1, 4, 5)
logical_vector <- c(TRUE, FALSE)
string_vector <- c("Njogu", "paul")

class(double_vector)
class(logical_vector)
class(string_vector)
```

### ***Write a R program to create a 5 x 4 matrix , 3 x 3 matrix with labels and fill the matrix by rows and 2 × 2 matrix with labels and fill the matrix by columns.***

```{r}
five_by_four <- 1:20

matrix(five_by_four,
    nrow = 5, byrow = TRUE,
    dimnames = list(c("One", "Two", "Three", "Four", "Five"), c("One", "Two", "Three", "Four"))
)


three_by_three <- 1:9

matrix(three_by_three, nrow = 3, byrow = TRUE, dimnames = list(c("One", "Two", "Three"), c("One", "Two", "Three")))

two_by_two <- 1:4

matrix(two_by_two,
    nrow = 2, byrow = FALSE,
    dimnames = list(c("One", "Two"), c("One", "Two"))
)
```

### ***Write a R program to create an array, passing in a vector of values and a vector of dimensions. Also provide names for each dimension.***

```{r}
a <- array(
    6:30,
    dim = c(4, 3, 2),
    dimnames = list(
        c("Col1", "Col2", "Col3", "Col4"),
        c("Row1", "Row2", "Row3"),
        c("Part1", "Part2")
    )
)
print(a)
```

### ***Write a R program to create an array with three columns, three rows, and two "tables", taking two  vectors as input to the array.  Print the array.***

```{r}
v1 <- c(1, 3, 5, 7)
v2 <- c(2, 4, 6, 8, 10)
arra1 <- array(c(v1, v2), dim = c(3, 3, 2))
print(arra1)
```

### ***Write a R program to create a list of elements using vectors, matrices and a functions. Print the content of the list.***

```{r}
list(c(1, 3), matrix(1:4, nrow = 2), mean)
```

### ***Write a R program to draw an empty plot and an empty plot specify the axes limits of the graphic.***

```{r}
x <- NULL
y <- NULL
plot(x, y, xlim = c(-4, 4), ylim = c(-5, 5), main = "NULL Plot")
```

### ***Write a R program to create a simple bar plot of five subjects marks.***

```{r}
marks <- c(70:74)
barplot(marks, main = "Results")
```

### ***Write a R program to create  bell curve of a random normal distribution.***

```{r}
y <- dnorm(x = seq(from = -5, to = 5, by = 1))

plot(-5:5, y, type = "both")
```

### ***Write a R program to compute sum, mean and product of a given vector elements.***

```{r}
sum(marks)
mean(marks)
prod(marks)
```

### ***Write a R program to create a list of heterogeneous data, which include character, numeric and logical vectors. Print the lists.***

```{r}
list(names = c("Jane", "Karuitha"), numerals = 1:4, logic = c(TRUE, FALSE))
```

### ***Write a R program to create a Dataframes which contain details of 5 employees and display the details.***

```{r}
my_data <- data.frame(names = c("Jane", "Karuitha"), age = c(19, 33), subject = c("Math", "English"))

summary(my_data)
```

### ***Write a R program to create the system's idea of the current date with and without time.***

```{r}
Sys.Date()
Sys.time()
```

### map function applies a function to many elements 

```{r}
my_list = list(height = c(1.7, 2), age = c(45, 30), weight = c(84, 70))
purrr::map_dbl(my_list, mean)

my_data %>% skimr::skim_without_charts()
```

